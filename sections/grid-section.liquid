{% schema %}
  {
    "name": "Grid Section",
    "settings": [
      {
        "type": "text",
        "id": "heading",
        "label": "Section heading",
        "default": "Tisso vision in the wild"
      },
      {
        "type": "header",
        "content": "Product Selection"
      },
      {
        "type": "product",
        "id": "product_1",
        "label": "Select Product 1"
      },
      {
        "type": "product",
        "id": "product_2",
        "label": "Select Product 2"
      },
      {
        "type": "product",
        "id": "product_3",
        "label": "Select Product 3"
      },
      {
        "type": "product",
        "id": "product_4",
        "label": "Select Product 4"
      },
      {
        "type": "product",
        "id": "product_5",
        "label": "Select Product 5"
      },
      {
        "type": "product",
        "id": "product_6",
        "label": "Select Product 6"
      },
      {
        "type": "header",
        "content": "Bonus Product Logic"
      },
      {
        "type": "product",
        "id": "bonus_product",
        "label": "Select the Bonus Product",
        "info": "This product will be added automatically when a variant with 'Black' and 'Medium' is added to the cart."
      }
    ],
    "presets": [
      {
        "name": "Product grid with modal"
      }
    ]
  }
{% endschema %}

<!-- Google Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&family=Lustria&display=swap" rel="stylesheet">

<div class="grid-section-wrapper">
  <div class="container">
    <h2 class="grid-section-heading">{{ section.settings.heading }}</h2>
    <div class="grid-section" role="list">
      {% for i in (1..6) %}
        {% assign product_key = 'product_' | append: i %}
        {% assign product_handle = section.settings[product_key] %}
        {% if product_handle != blank %}
          {% assign product = all_products[product_handle] %}
          <div class="grid-item" role="listitem">
            <img 
              src="{{ product.featured_image | img_url: '900x' }}" 
              alt="{{ product.title | escape }}" 
              class="grid-item-image">
            <div class="grid-item-overlay">
              <button 
                class="open-modal-btn" 
                data-product-handle="{{ product.handle }}" 
                aria-label="Open {{ product.title | escape }} details">
              </button>
            </div>
          </div>
        {% else %}
          <div class="grid-item grid-item-empty"></div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
</div>

<!-- Modal -->
<div 
  id="productModal" 
  class="modal" 
  aria-hidden="true" 
  role="dialog" 
  aria-modal="true"
  data-bonus-product-handle="{{ section.settings.bonus_product }}">
  <div class="modal-content" role="document">
    <button class="modal-close" aria-label="Close">×</button>
    <div class="modal-body">
      <div class="modal-top-section">
        <div class="modal-image-wrapper">
          <img id="modalImage" src="" alt="" class="modal-image">
        </div>
        <div class="modal-details">
          <h3 id="modalName" class="modal-title"></h3>
          <p id="modalPrice" class="modal-price"></p>
          <p id="modalDesc" class="modal-desc"></p>
        </div>
      </div>

      <div class="variant-selectors-area">
        <div id="colorVariantBlock" class="variant-block">
          <label class="variant-label">Color</label>
          <div id="colorOptions" class="color-options" role="radiogroup">
            <span class="active-color-bg"></span>
            <!-- Color choices populated by JS -->
          </div>
        </div>
        <div id="sizeVariantBlock" class="variant-block">
           <label class="variant-label">Size</label>
           <!-- Custom Dropdown Structure -->
           <div id="customSizeDropdown" class="custom-dropdown">
             <button type="button" id="customSizeTrigger" class="custom-dropdown-trigger" aria-haspopup="listbox" aria-expanded="false">
               <span id="customSizeSelectedText">Choose your size</span>
             </button>
             <div id="customSizeOptionsWrapper" class="custom-dropdown-options-wrapper">
               <ul id="customSizeOptions" role="listbox">
                 <!-- Options populated by JS -->
               </ul>
             </div>
           </div>
        </div>
      </div>
      
      <div class="modal-actions">
        <button id="addToCartBtn" class="add-to-cart-btn">ADD TO CART</button>
      </div>
      <p id="modalNotice" class="modal-notice" aria-live="polite"></p>
    </div>
  </div>
</div>

<style>
  /* --- General Section & Grid --- */
  .grid-section-wrapper {
    padding: 80px 0 110px;
    background: #fff;
  }
  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 32px;
    box-sizing: border-box;
  }
  .grid-section-heading {
    font-family: 'Lustria', serif;
    font-weight: 400;
    font-size: 36px;
    color: #111;
    margin: 0 0 40px 0;
    text-align: left;
  }
  .grid-section {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 24px;
  }
  .grid-item {
    position: relative;
    overflow: hidden;
    background: #f8f8f8;
  }
  .grid-item-image {
    width: 100%;
    height: 500px;
    object-fit: cover;
  }
  .open-modal-btn {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background: #fff;
    border: 1px solid #000;
    cursor: pointer;
  }
  .open-modal-btn::before,
  .open-modal-btn::after {
    content: '';
    position: absolute;
    background-color: #000;
  }
  .open-modal-btn::before {
    width: 10px;
    height: 2px;
  }
  .open-modal-btn::after {
    width: 2px;
    height: 10px;
  }

  /* --- MODAL STYLES --- */
  .modal {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.6);
    align-items: center;
    justify-content: center;
    z-index: 9999;
    opacity: 0;
    transition: opacity 0.25s ease;
  }
  .modal.is-open {
    display: flex;
    opacity: 1;
  }
  .modal-content {
    position: relative;
    background: #fff;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    color: #000;
    width: 311px;
    height: 447px;
    box-sizing: border-box;
    padding: 0;
    transform: scale(0.95);
    opacity: 0;
    transition: all 0.25s ease;
  }
  .modal.is-open .modal-content {
    transform: scale(1);
    opacity: 1;
  }
  .modal-close {
    position: absolute;
    top: 14px;
    right: 14px;
    border: none;
    background: transparent;
    font-size: 24px;
    cursor: pointer;
    z-index: 1001;
  }
  .modal-body {
    height: 100%;
    position: relative;
  }
  .modal-top-section {
    display: flex;
    padding: 36px 0 0 17px;
    box-sizing: border-box;
  }
  .modal-image-wrapper {
    flex-shrink: 0;
  }
  .modal-image {
    width: 120px;
    height: 140px;
    object-fit: cover;
  }
  .modal-details {
    padding-left: 8px;
    padding-right: 20px;
  }
  .modal-title {
    font-family: 'Jost', sans-serif;
    font-weight: 300;
    font-size: 16px;
    margin: 13px 0 0 0;
  }
  .modal-price {
    font-family: 'Lustria', serif;
    font-size: 16px;
    margin: 10px 0 0 0;
  }
  .modal-desc {
    font-family: 'Jost', sans-serif;
    font-weight: 300;
    font-size: 14px;
    line-height: 1.2;
    margin: 6px 0 0 0;
    max-height: 70px;
    overflow: hidden;
  }

  /* --- Variant Selectors Area --- */
  .variant-selectors-area {
    position: absolute;
    top: 186px;
    left: 20px;
    width: 271px;
  }
  .variant-block {
    margin-bottom: 12px;
  }
  .variant-label {
    font-family: 'Jost', sans-serif;
    font-weight: 400;
    font-size: 14px;
    line-height: 1.3;
    display: block;
    margin-bottom: 8px;
  }

  /* Color Options with Sliding Background */
  .color-options {
    position: relative;
    display: flex;
    border: 1px solid #000;
    padding: 0;
    height: 48px;
    box-sizing: border-box;
  }
  .active-color-bg {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background-color: #000;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
  }
  .color-choice {
    flex: 1;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    border: none;
    cursor: pointer;
    font-family: 'Jost', sans-serif;
    font-weight: 400;
    font-size: 18px;
    text-transform: capitalize;
    padding: 0 0 0 8px; /* Padding for strip */
    z-index: 2;
    color: #000;
    transition: color 0.3s ease;
  }
  .color-choice:not(:last-child) {
    border-right: 1px solid #000;
  }
  .color-choice.active {
    color: #fff;
  }
  .color-strip-full {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 8px;
  }
  .color-strip-full[data-color="white"] {
    border-right: 1px solid #eee;
  }

  /* Custom Size Dropdown */
  #sizeVariantBlock {
    margin-top: 18px;
  }
  .custom-dropdown {
    position: relative;
  }
  .custom-dropdown-trigger {
    position: relative;
    width: 100%;
    height: 48px;
    border: 1px solid #000;
    background-color: #fff;
    cursor: pointer;
    padding: 0 13px;
    text-align: left;
    font-family: 'Jost', sans-serif;
    font-weight: 400;
    font-size: 16px;
    letter-spacing: -0.02em;
  }
  .custom-dropdown-trigger::after {
    content: '▾';
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 20px;
    pointer-events: none;
    transition: transform 0.2s;
  }
  .custom-dropdown.is-open .custom-dropdown-trigger::after {
    transform: translateY(-50%) rotate(180deg);
  }
  .custom-dropdown-options-wrapper {
    display: none;
    position: absolute;
    top: 52px;
    left: 0;
    width: 271px;
    max-height: 126px; /* Approx 3 items visible */
    background-color: #fff;
    border: 1px solid #000;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    z-index: 1000;
    overflow-y: auto;
  }
  .custom-dropdown.is-open .custom-dropdown-options-wrapper {
    display: block;
  }
  #customSizeOptions {
    list-style: none;
    margin: 0;
    padding: 10px 0;
  }
  #customSizeOptions li {
    font-family: 'Jost', sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1;
    letter-spacing: -0.02em;
    text-align: center;
    padding: 10px 0;
    cursor: pointer;
  }
  #customSizeOptions li:hover {
    background-color: #f0f0f0;
  }
  #customSizeOptions li.selected {
    font-weight: 600;
  }

  /* --- Actions & Notice --- */
  .modal-actions {
    position: absolute;
    top: 389px;
    left: 50%;
    transform: translateX(-50%);
    width: 100%;
    text-align: center;
  }
  .add-to-cart-btn {
    position: relative;
    background: #000;
    color: #fff;
    border: none;
    height: 44px;
    cursor: pointer;
    width: 271px;
    font-family: 'Jost', sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 20.48px;
    letter-spacing: 0px;
    text-transform: uppercase;
  }
  .add-to-cart-btn::after {
    content: '→';
    position: absolute;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 22px;
  }
  .modal-notice {
    position: absolute;
    bottom: 15px;
    left: 20px;
    right: 20px;
    font-size: 13px;
    color: #D32F2F;
    text-align: center;
    height: 15px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // --- Element selection ---
    const modal = document.getElementById('productModal');
    const modalImg = document.getElementById('modalImage');
    const modalName = document.getElementById('modalName');
    const modalPrice = document.getElementById('modalPrice');
    const modalDesc = document.getElementById('modalDesc');
    const colorContainer = document.getElementById('colorOptions');
    const addBtn = document.getElementById('addToCartBtn');
    const closeBtn = document.querySelector('.modal-close');
    const notice = document.getElementById('modalNotice');
    
    // --- Custom UI Elements ---
    const customDropdown = document.getElementById('customSizeDropdown');
    const dropdownTrigger = document.getElementById('customSizeTrigger');
    const dropdownSelectedText = document.getElementById('customSizeSelectedText');
    const dropdownOptionsList = document.getElementById('customSizeOptions');
    const activeColorBg = document.querySelector('.active-color-bg');
    
    // --- State variables ---
    let currentVariant = null;
    let currentVariantObject = null;
    let currentProduct = null;
    let selectedSize = null;

    /* --- Build JS product data from Liquid --- */
    window.gridProducts = {
      {% for i in (1..6) %}
        {% assign key = 'product_' | append: i %}
        {% assign handle = section.settings[key] %}
        {% if handle != blank %}
          "{{ all_products[handle].handle }}": {{ all_products[handle] | json }},
        {% endif %}
      {% endfor %}
    };

    // --- Core Functions ---
    function updateVariant() {
      notice.textContent = '';
      const selectedColorBtn = colorContainer.querySelector('.color-choice.active');
      const colorVal = selectedColorBtn ? selectedColorBtn.textContent.trim() : '';
      const sizeVal = selectedSize || '';
      
      if (currentProduct) {
        const variant = currentProduct.variants.find(v => v.option1 === sizeVal && v.option2 === colorVal);
        currentVariantObject = variant;
        currentVariant = variant ? variant.id : null;
      }
    }
    
    function closeModal() {
      modal.classList.remove('is-open');
      customDropdown.classList.remove('is-open');
      dropdownTrigger.setAttribute('aria-expanded', 'false');
      document.body.style.overflow = '';
    }

    function handleColorSelection(btn) {
      colorContainer.querySelectorAll('.color-choice').forEach(b => {
        b.classList.remove('active');
        b.setAttribute('aria-checked', 'false');
      });
      btn.classList.add('active');
      btn.setAttribute('aria-checked', 'true');
      
      const btnRect = btn.getBoundingClientRect();
      activeColorBg.style.width = `${btnRect.width}px`;
      activeColorBg.style.transform = `translateX(${btn.offsetLeft}px)`;
      
      updateVariant();
    }

    async function addBonusProduct() {
      const bonusProductHandle = modal.dataset.bonusProductHandle;
      if (!bonusProductHandle) {
        console.warn('Bonus product handle is not set in the theme editor.');
        return;
      }
      
      try {
        const res = await fetch(`/products/${bonusProductHandle}.js`);
        if (!res.ok) return;

        const product = await res.json();
        const bonusVariantId = product.variants[0].id;

        if (bonusVariantId) {
          await fetch('/cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: bonusVariantId, quantity: 1 })
          });
        }
      } catch (error) {
        console.error('Could not add bonus product:', error);
      }
    }

    // --- Event Listeners ---
    document.querySelectorAll('.open-modal-btn').forEach(btn => {
      btn.onclick = () => {
        const handle = btn.dataset.productHandle;
        const p = window.gridProducts[handle];
        if (!p) return;
        
        currentProduct = p;

        // 1. Populate Modal
        modalImg.src = p.featured_image || p.images[0];
        modalImg.alt = p.title;
        modalName.textContent = p.title;
        modalPrice.textContent = `€${(p.price / 100).toFixed(2).replace('.', ',')}`;
        modalDesc.innerHTML = p.description.replace(/<[^>]*>/g, '').split(' ').slice(0, 25).join(' ') + '...';

        // 2. Populate Colors
        const colorChoices = colorContainer.querySelectorAll('.color-choice');
        colorChoices.forEach(choice => choice.remove());
        const colors = [...new Set(p.variants.map(v => v.option2).filter(Boolean))];
        
        colors.forEach((color) => {
          const btn = document.createElement('button');
          btn.className = 'color-choice';
          btn.setAttribute('role', 'radio');
          btn.setAttribute('aria-checked', 'false');
          
          const colorStrip = document.createElement('span');
          colorStrip.className = 'color-strip-full';
          const colorValue = color.toLowerCase().trim();
          colorStrip.style.backgroundColor = colorValue;
          colorStrip.dataset.color = colorValue;
          btn.appendChild(colorStrip);

          btn.append(color);
          btn.onclick = () => handleColorSelection(btn);
          colorContainer.appendChild(btn);
        });
        
        activeColorBg.style.width = '0px';

        // 3. Populate Sizes
        dropdownOptionsList.innerHTML = '';
        const sizes = [...new Set(p.variants.map(v => v.option1).filter(Boolean))];
        sizes.forEach(s => {
          const li = document.createElement('li');
          li.textContent = s;
          li.dataset.value = s;
          li.setAttribute('role', 'option');
          dropdownOptionsList.appendChild(li);
        });
        
        // 4. Reset State & Show Modal
        dropdownSelectedText.textContent = 'Choose your size';
        selectedSize = null;
        currentVariant = null;
        currentVariantObject = null;
        modal.classList.add('is-open');
        document.body.style.overflow = 'hidden';
      };
    });

    // --- Custom Dropdown Logic ---
    dropdownTrigger.onclick = () => {
      const isOpen = customDropdown.classList.toggle('is-open');
      dropdownTrigger.setAttribute('aria-expanded', isOpen);
    };

    dropdownOptionsList.onclick = (e) => {
      if (e.target.tagName === 'LI') {
        selectedSize = e.target.dataset.value;
        dropdownSelectedText.textContent = selectedSize;
        customDropdown.classList.remove('is-open');
        dropdownTrigger.setAttribute('aria-expanded', 'false');
        updateVariant();
      }
    };
    
    document.addEventListener('click', (e) => {
        if (!customDropdown.contains(e.target) && e.target !== dropdownTrigger) {
            customDropdown.classList.remove('is-open');
            dropdownTrigger.setAttribute('aria-expanded', 'false');
        }
    });

    // --- Modal Closing Logic ---
    closeBtn.onclick = closeModal;
    modal.onclick = e => { if (e.target === modal) closeModal(); };
    document.addEventListener('keydown', e => { if (e.key === 'Escape') closeModal(); });

    // --- Add to Cart Logic ---
    addBtn.onclick = async () => {
      if (!currentVariant) {
        notice.textContent = 'Please choose a color and size.';
        return;
      }
      const originalText = addBtn.innerHTML;
      addBtn.disabled = true;
      addBtn.innerHTML = 'ADDING...';
      try {
        const res = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: currentVariant, quantity: 1 })
        });
        if (res.ok) {
          // --- CONDITIONAL LOGIC ---
          if (currentVariantObject && currentVariantObject.option1 === 'Medium' && currentVariantObject.option2 === 'Black') {
            await addBonusProduct();
          }
          // --- END CONDITIONAL LOGIC ---

          // Close modal without success text
          setTimeout(() => {
            closeModal();
            notice.textContent = '';
          }, 800);
        } else {
          const errorData = await res.json();
          notice.textContent = errorData.description || 'Failed to add item.';
          notice.style.color = '#D32F2F';
        }
      } catch {
        notice.textContent = 'Error adding to cart.';
        notice.style.color = '#D32F2F';
      } finally {
        setTimeout(() => {
          addBtn.disabled = false;
          addBtn.innerHTML = originalText;
        }, 800);
      }
    };
  });
</script>