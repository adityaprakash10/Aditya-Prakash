{% schema %}
{
  "name": "Grid Section",
  "settings": [
    { "type": "product", "id": "product_1", "label": "Select Product 1" },
    { "type": "product", "id": "product_2", "label": "Select Product 2" },
    { "type": "product", "id": "product_3", "label": "Select Product 3" },
    { "type": "product", "id": "product_4", "label": "Select Product 4" },
    { "type": "product", "id": "product_5", "label": "Select Product 5" },
    { "type": "product", "id": "product_6", "label": "Select Product 6" }
  ],
  "presets": [{ "name": "Grid Section" }]
}
{% endschema %}

{% stylesheet %}
.grid-section {
  padding: 40px 20px;
  max-width: 1200px;
  margin: auto;
}
.grid-section .section-title {
  font-size: 28px;
  font-weight: 600;
  margin-bottom: 30px;
  text-align: left;
  padding-left: 10px;
}
.grid-section .product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 32px;
}
.grid-section .product-item {
  position: relative;
  border-radius: 6px;
  box-shadow: 0 3px 16px rgba(0,0,0,0.08);
  overflow: hidden;
  cursor: pointer;
}
.grid-section .product-item img {
  width: 100%;
  border-radius: 6px;
  display: block;
}
.grid-section .plus-icon {
  position: absolute;
  top: 16px;
  right: 16px;
  width: 48px;
  height: 48px;
  background: #f4f4f4;
  border: 2.5px solid #232323;
  border-radius: 50%;
  font-size: 30px;
  font-weight: 700;
  color: #232323;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 4px 16px rgba(0,0,0,0.16);
  user-select: none;
  cursor: pointer;
  transition: background 0.18s, color 0.18s, border 0.18s;
  z-index: 10;
}
.grid-section .product-item:hover .plus-icon {
  background: #232323;
  color: #fff;
  border-color: #232323;
}

.modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.modal {
  background: white;
  width: 90%;
  max-width: 420px;
  border-radius: 8px;
  padding: 24px;
  position: relative;
  font-family: 'Inter', sans-serif;
}

.modal-close {
  position: absolute;
  top: 12px;
  right: 12px;
  font-size: 22px;
  font-weight: 700;
  cursor: pointer;
  background: transparent;
  border: none;
  line-height: 1;
}

.modal img {
  width: 100%;
  max-height: 220px;
  object-fit: cover;
  border-radius: 6px;
  margin-bottom: 18px;
}

.modal .product-name {
  font-weight: 700;
  font-size: 24px;
  margin-bottom: 6px;
}

.modal .product-price {
  font-weight: 600;
  font-size: 20px;
  margin-bottom: 10px;
}

.modal .product-desc {
  font-size: 16px;
  color: #282828;
  margin-bottom: 18px;
}

.variant-options {
  display: flex;
  gap: 8px;
  margin-bottom: 16px;
}

.variant-button {
  flex: 1;
  padding: 12px 0;
  font-size: 16px;
  font-weight: 700;
  border: 2px solid #222;
  background-color: #fff;
  color: #222;
  text-align: center;
  cursor: pointer;
  border-radius: 0;
  transition: all 0.18s ease;
}

.variant-button.active {
  background-color: #222;
  color: #fff;
}

.size-select {
  width: 100%;
  padding: 12px;
  font-weight: 700;
  font-size: 16px;
  border: 2px solid #222;
  background-color: #fff;
  color: #222;
  margin-bottom: 20px;
  border-radius: 0;
  appearance: none;
}
.add-to-cart-btn {
  display: block;
  width: 100%;
  padding: 14px;
  font-size: 18px;
  font-weight: 700;
  background-color: #000;
  color: #fff;
  border-radius: 2px;
  border: none;
  cursor: pointer;
}
.add-to-cart-btn:hover {
  background-color: #222;
}
{% endstylesheet %}

{%- assign product_1 = all_products[section.settings.product_1] -%}
{%- assign product_2 = all_products[section.settings.product_2] -%}
{%- assign product_3 = all_products[section.settings.product_3] -%}
{%- assign product_4 = all_products[section.settings.product_4] -%}
{%- assign product_5 = all_products[section.settings.product_5] -%}
{%- assign product_6 = all_products[section.settings.product_6] -%}

<section class="grid-section">
  <h2 class="section-title">Tisso vison in the wild</h2>
  <div class="product-grid">
    {% for p in (1..6) %}
      {% assign product_var = 'product_' | append: p %}
      {% assign product = all_products[section.settings[product_var]] %}
      {% if product %}
        <div class="product-item" data-product-handle="{{ product.handle }}">
          <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
          <div class="plus-icon">+</div>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <div id="product-modal" class="modal-overlay" aria-hidden="true">
    <div class="modal">
      <button id="modal-close" class="modal-close">&times;</button>
      <img id="modal-image" src="" alt="">
      <div class="product-name" id="modal-name"></div>
      <div class="product-price" id="modal-price"></div>
      <div class="product-desc" id="modal-desc"></div>
      <div class="variant-options" id="color-options"></div>
      <select id="size-select" class="size-select">
        <option value="" disabled selected>Choose your size</option>
      </select>
      <button id="add-to-cart" class="add-to-cart-btn">ADD TO CART â†’</button>
    </div>
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('product-modal');
  const modalImage = document.getElementById('modal-image');
  const modalName = document.getElementById('modal-name');
  const modalPrice = document.getElementById('modal-price');
  const modalDesc = document.getElementById('modal-desc');
  const colorOptions = document.getElementById('color-options');
  const sizeSelect = document.getElementById('size-select');
  const addToCartBtn = document.getElementById('add-to-cart');
  let selectedProduct = null;
  let selectedColor = null;
  let selectedSize = null;
  let selectedVariantId = null;

  document.querySelector('.product-grid').addEventListener('click', e => {
    if (e.target.closest('.plus-icon')) {
      const handle = e.target.closest('.product-item').dataset.productHandle;
      fetch(`/products/${handle}.js`)
        .then(r => r.json())
        .then(product => openModal(product));
    }
  });

  document.getElementById('modal-close').addEventListener('click', closeModal);

  addToCartBtn.addEventListener('click', () => {
    if (!selectedVariantId) {
      alert('Please select color and size.');
      return;
    }
    fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: selectedVariantId, quantity: 1 })
    }).then(() => closeModal());
  });

  function openModal(product) {
    selectedProduct = product;
    modalImage.src = product.featured_image;
    modalName.textContent = product.title;
    modalPrice.textContent = Shopify.formatMoney(product.price);
    modalDesc.innerHTML = product.description;

    // Render colors as buttons
    const colors = [...new Set(product.variants.map(v => v.option1).filter(Boolean))];
    colorOptions.innerHTML = '';
    colors.forEach(color => {
      const btn = document.createElement('button');
      btn.className = 'variant-button';
      btn.textContent = color;
      btn.onclick = () => {
        selectedColor = color;
        [...colorOptions.children].forEach(b => b.classList.toggle('active', b === btn));
        updateSizeDropdown();
      };
      colorOptions.appendChild(btn);
    });

    // Reset size dropdown
    sizeSelect.innerHTML = '<option value="" disabled selected>Choose your size</option>';
    sizeSelect.onchange = e => {
      selectedSize = e.target.value;
      updateSelectedVariant();
    };

    modal.style.display = 'flex';
    modal.setAttribute('aria-hidden', 'false');
  }

  function updateSizeDropdown() {
    if (!selectedColor) return;
    const sizes = [...new Set(
      selectedProduct.variants.filter(v => v.option1 === selectedColor).map(v => v.option2).filter(Boolean)
    )];
    sizeSelect.innerHTML = '<option value="" disabled selected>Choose your size</option>';
    sizes.forEach(size => {
      const opt = document.createElement('option');
      opt.value = size;
      opt.textContent = size;
      sizeSelect.appendChild(opt);
    });
    selectedSize = null;
    selectedVariantId = null;
  }

  function updateSelectedVariant() {
    const variant = selectedProduct.variants.find(v =>
      v.option1 === selectedColor && v.option2 === selectedSize
    );
    selectedVariantId = variant ? variant.id : null;
  }

  function closeModal() {
    modal.style.display = 'none';
    modal.setAttribute('aria-hidden', 'true');
  }
});
</script>
