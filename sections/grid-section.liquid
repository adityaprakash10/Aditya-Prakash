{% schema %}
{
  "name": "Grid Section",
  "settings": [
    { "type": "product", "id": "product_1", "label": "Select Product 1" },
    { "type": "product", "id": "product_2", "label": "Select Product 2" },
    { "type": "product", "id": "product_3", "label": "Select Product 3" },
    { "type": "product", "id": "product_4", "label": "Select Product 4" },
    { "type": "product", "id": "product_5", "label": "Select Product 5" },
    { "type": "product", "id": "product_6", "label": "Select Product 6" }
  ]
}
{% endschema %}

<div class="grid-section">
  {% for i in (1..6) %}
    {% assign product_key = 'product_' | append: i %}
    {% assign product_handle = section.settings[product_key] %}
    {% if product_handle != blank %}
      {% assign product = all_products[product_handle] %}
      <div class="grid-item">
        <img src="{{ product.featured_image | img_url: '400x' }}" alt="{{ product.title }}">
        <div class="grid-item-overlay">
          <button class="open-modal-btn" data-product-handle="{{ product.handle }}">+</button>
        </div>
      </div>
    {% endif %}
  {% endfor %}
</div>

<!-- Modal -->
<div id="productModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <img id="modalImage" src="" alt="">
    <h2 id="modalName"></h2>
    <p id="modalDesc"></p>

    <!-- Color options (buttons) -->
    <div id="colorOptions" class="color-options"></div>

    <!-- Size dropdown -->
    <select id="sizeSelect">
      <option value="" disabled selected>Choose your size</option>
    </select>

    <!-- Add to cart -->
    <button id="addToCartBtn">Add to Cart</button>
  </div>
</div>

<style>
.modal {
  display: none;
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-content {
  background: #fff;
  padding: 15px;
  border-radius: 6px;
  max-width: 320px;   /* ðŸ‘ˆ compact width */
  width: 100%;
  position: relative;
  text-align: left;
}

.modal-content img {
  width: 100%;
  border-radius: 4px;
  margin-bottom: 10px;
}

.modal-content h2 {
  font-size: 16px;
  margin: 8px 0 4px 0;
}

.modal-content p {
  font-size: 13px;
  color: #444;
  margin-bottom: 10px;
}

.close {
  position: absolute;
  top: 8px; right: 8px;
  cursor: pointer;
  font-size: 18px;
}

.color-options {
  display: flex;
  gap: 8px;
  margin: 10px 0;
}

.variant-button {
  flex: 1;
  border: 1px solid #000;
  background: #fff;
  padding: 6px;
  cursor: pointer;
  font-size: 13px;
  border-radius: 4px;
  text-align: center;
}

.variant-button.active {
  background: #000;
  color: #fff;
}

#sizeSelect {
  width: 100%;
  padding: 8px;
  font-size: 13px;
  border: 1px solid #000;
  border-radius: 4px;
  margin-bottom: 12px;
}

#addToCartBtn {
  background: #000;
  color: #fff;
  padding: 10px;
  font-size: 14px;
  border: none;
  width: 100%;
  border-radius: 4px;
  cursor: pointer;
}
cursor: pointer;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const modal = document.getElementById("productModal");
  const modalImage = document.getElementById("modalImage");
  const modalName = document.getElementById("modalName");
  const modalDesc = document.getElementById("modalDesc");
  const colorOptions = document.getElementById("colorOptions");
  const sizeSelect = document.getElementById("sizeSelect");
  const addToCartBtn = document.getElementById("addToCartBtn");
  const closeModal = document.querySelector(".close");

  let selectedProduct = null;
  let selectedSize = null;
  let selectedColor = null;
  let selectedVariantId = null;

  const productsData = {
    {% for i in (1..6) %}
      {% assign product_key = 'product_' | append: i %}
      {% assign product_handle = section.settings[product_key] %}
      {% if product_handle != blank %}
        "{{ all_products[product_handle].handle }}": {{ all_products[product_handle] | json }},
      {% endif %}
    {% endfor %}
  };

  document.querySelectorAll(".open-modal-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      openModal(btn.dataset.productHandle);
    });
  });

  closeModal.addEventListener("click", () => {
    modal.style.display = "none";
  });

  function openModal(handle) {
    if (!productsData.hasOwnProperty(handle)) return;
    selectedProduct = productsData[handle];

    modalImage.src = selectedProduct.featured_image;
    modalImage.alt = selectedProduct.title;
    modalName.textContent = selectedProduct.title;
    modalDesc.innerHTML = selectedProduct.description;

    colorOptions.innerHTML = "";
    sizeSelect.innerHTML = '<option value="" disabled selected>Choose your size</option>';

    const sizes = new Set();
    const colors = new Set();

    selectedProduct.variants.forEach(v => {
      // if option looks like size
      if (v.option1 && v.option1.match(/XS|S|M|L|XL|XXL/)) {
        sizes.add(v.option1);
        if (v.option2) colors.add(v.option2);
      } else if (v.option2 && v.option2.match(/XS|S|M|L|XL|XXL/)) {
        sizes.add(v.option2);
        if (v.option1) colors.add(v.option1);
      } else {
        // fallback: treat option1 as color
        if (v.option1) colors.add(v.option1);
        if (v.option2) sizes.add(v.option2);
      }
    });

    // render color buttons
    colors.forEach(color => {
      const btn = document.createElement("button");
      btn.className = "variant-button";
      btn.textContent = color;
      btn.type = "button";
      btn.onclick = () => {
        selectedColor = color;
        Array.from(colorOptions.children).forEach(b => b.classList.toggle("active", b.textContent === color));
        updateSelectedVariant();
      };
      colorOptions.appendChild(btn);
    });

    // render size dropdown
    sizes.forEach(size => {
      const opt = document.createElement("option");
      opt.value = size;
      opt.textContent = size;
      sizeSelect.appendChild(opt);
    });

    sizeSelect.onchange = e => {
      selectedSize = e.target.value;
      updateSelectedVariant();
    };

    modal.style.display = "flex";
  }

  function updateSelectedVariant() {
    if (!selectedProduct) return;
    const variant = selectedProduct.variants.find(v =>
      (v.option1 === selectedSize && v.option2 === selectedColor) ||
      (v.option2 === selectedSize && v.option1 === selectedColor)
    );
    selectedVariantId = variant ? variant.id : null;
  }

  addToCartBtn.addEventListener("click", () => {
    if (!selectedVariantId) {
      alert("Please select size and color");
      return;
    }
    fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: selectedVariantId, quantity: 1 })
    })
    .then(res => res.json())
    .then(() => {
      alert("Added to cart!");
      modal.style.display = "none";
    })
    .catch(() => alert("Error adding to cart"));
  });
});
</script>
