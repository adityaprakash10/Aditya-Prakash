{% schema %}
{
  "name": "Grid Section",
  "settings": [
    { "type": "product", "id": "product_1", "label": "Select Product 1" },
    { "type": "product", "id": "product_2", "label": "Select Product 2" },
    { "type": "product", "id": "product_3", "label": "Select Product 3" },
    { "type": "product", "id": "product_4", "label": "Select Product 4" },
    { "type": "product", "id": "product_5", "label": "Select Product 5" },
    { "type": "product", "id": "product_6", "label": "Select Product 6" }
  ],
  "presets": [{ "name": "Grid Section" }]
}
{% endschema %}

{% stylesheet %}
.grid-section {
  padding: 40px 20px;
  max-width: 1200px;
  margin: auto;
}
.grid-section .section-title {
  font-size: 28px;
  font-weight: 600;
  margin-bottom: 30px;
  text-align: left;
}
.grid-section .product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 32px;
}
.grid-section .product-item {
  position: relative;
  border-radius: 6px;
  box-shadow: 0 3px 16px rgba(0,0,0,0.08);
  overflow: hidden;
  cursor: pointer;
}
.grid-section .product-item img {
  width: 100%;
  border-radius: 6px;
  display: block;
}
.grid-section .plus-icon {
  position: absolute;
  top: 16px;
  right: 16px;
  width: 48px;
  height: 48px;
  background: #f4f4f4;
  border: 2.5px solid #232323;
  border-radius: 50%;
  font-size: 30px;
  font-weight: 700;
  color: #232323;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 4px 16px rgba(0,0,0,0.16);
  cursor: pointer;
  transition: background 0.18s, color 0.18s, border 0.18s;
  z-index: 10;
}
.grid-section .product-item:hover .plus-icon {
  background: #232323;
  color: #fff;
  border-color: #232323;
}

.modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}
.modal {
  background: white;
  width: 90%;
  max-width: 420px;
  border-radius: 8px;
  padding: 24px;
  position: relative;
}
.modal-close {
  position: absolute;
  top: 12px;
  right: 12px;
  font-size: 22px;
  font-weight: 700;
  cursor: pointer;
  background: transparent;
  border: none;
}
.modal img {
  width: 100%;
  max-height: 220px;
  object-fit: cover;
  border-radius: 6px;
  margin-bottom: 18px;
}
.modal .product-name {
  font-weight: 700;
  font-size: 24px;
  margin-bottom: 6px;
}
.modal .product-price {
  font-weight: 600;
  font-size: 20px;
  margin-bottom: 10px;
}
.color-options {
  display: flex;
  gap: 8px;
  margin-bottom: 16px;
}
.color-options button {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  border: 2px solid #333;
  cursor: pointer;
}
.size-select {
  width: 100%;
  padding: 12px;
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 16px;
  border: 2px solid #333;
}
.add-to-cart-btn {
  display: block;
  width: 100%;
  padding: 14px;
  font-size: 18px;
  font-weight: 700;
  background-color: #000;
  color: #fff;
  border: none;
  cursor: pointer;
}
.add-to-cart-btn:hover {
  background-color: #222;
}
{% endstylesheet %}

{%- assign product_1 = all_products[section.settings.product_1] -%}
{%- assign product_2 = all_products[section.settings.product_2] -%}
{%- assign product_3 = all_products[section.settings.product_3] -%}
{%- assign product_4 = all_products[section.settings.product_4] -%}
{%- assign product_5 = all_products[section.settings.product_5] -%}
{%- assign product_6 = all_products[section.settings.product_6] -%}

<section class="grid-section">
  <h2 class="section-title">Tisso vision in the wild</h2>
  <div class="product-grid">
    {% for product in (product_1, product_2, product_3, product_4, product_5, product_6) %}
      {% if product %}
        <div class="product-item" data-product-handle="{{ product.handle }}">
          <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
          <div class="plus-icon">+</div>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <div id="product-popup" class="modal-overlay">
    <div class="modal">
      <button class="modal-close close-btn">&times;</button>
      <img id="popup-image" src="" alt="">
      <div class="product-name" id="popup-title"></div>
      <div class="product-price" id="popup-price"></div>
      <div class="color-options"></div>
      <select id="size-select" class="size-select">
        <option value="" disabled selected>Select size</option>
      </select>
      <button id="add-to-cart" class="add-to-cart-btn">ADD TO CART →</button>
    </div>
  </div>
</section>

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const popup = document.getElementById('product-popup');
  const closeBtn = document.querySelector('.close-btn');
  const popupImage = document.getElementById('popup-image');
  const popupTitle = document.getElementById('popup-title');
  const popupPrice = document.getElementById('popup-price');
  const colorOptions = document.querySelector('.color-options');
  const sizeSelect = document.getElementById('size-select');

  // ✅ Event delegation for all + buttons
  document.addEventListener('click', async function(e) {
    if (e.target.classList.contains('plus-icon')) {
      const handle = e.target.closest('.product-item').dataset.productHandle;
      if (!handle) return;

      try {
        const response = await fetch(`/products/${handle}.js`);
        const product = await response.json();

        popupImage.src = product.featured_image;
        popupTitle.textContent = product.title;
        popupPrice.textContent = Shopify.formatMoney(product.price);

        // Reset options
        colorOptions.innerHTML = '';
        sizeSelect.innerHTML = '<option value="" disabled selected>Select size</option>';

        // Build options
        product.options.forEach(option => {
          if (option.name.toLowerCase().includes('color')) {
            option.values.forEach(value => {
              const btn = document.createElement('button');
              btn.style.background = value.toLowerCase();
              btn.title = value;
              colorOptions.appendChild(btn);
            });
          } else if (option.name.toLowerCase().includes('size')) {
            option.values.forEach(value => {
              const opt = document.createElement('option');
              opt.value = value;
              opt.textContent = value;
              sizeSelect.appendChild(opt);
            });
          }
        });

        popup.style.display = 'flex';
      } catch (err) {
        console.error('Error loading product:', err);
      }
    }
  });

  // Close popup
  closeBtn.addEventListener('click', () => {
    popup.style.display = 'none';
  });
  popup.addEventListener('click', (e) => {
    if (e.target === popup) {
      popup.style.display = 'none';
    }
  });
});
{% endjavascript %}
